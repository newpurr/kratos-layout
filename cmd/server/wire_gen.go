// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/newpurr/stock/internal/biz"
	"github.com/newpurr/stock/internal/conf"
	"github.com/newpurr/stock/internal/data"
	"github.com/newpurr/stock/internal/data/repositories/user"
	"github.com/newpurr/stock/internal/event"
	"github.com/newpurr/stock/internal/server"
	"github.com/newpurr/stock/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData)
	client := data.NewRedis(confData)
	defaultDataSource, cleanup, err := data.NewData(confData, logger, db, client)
	if err != nil {
		return nil, nil, err
	}
	transactionManager := data.NewTransactionDataSource(defaultDataSource)
	busPublisher := event.NewBusPublisher()
	userRepo := user.NewUserCacheRepo(defaultDataSource, logger)
	userUsecase := biz.NewUserUsecase(transactionManager, busPublisher, logger, userRepo)
	userService := service.NewUserService(userUsecase, logger, busPublisher)
	httpServer := server.NewHTTPServer(confServer, logger, defaultDataSource, userService)
	grpcServer := server.NewGRPCServer(confServer, logger, userService)
	bus := event.NewEventBus()
	app := newApp(logger, httpServer, grpcServer, bus)
	return app, func() {
		cleanup()
	}, nil
}
